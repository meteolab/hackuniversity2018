<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="initial-scale=1.0, width=device-width" />
    <link rel="stylesheet" type="text/css" href="https://js.cit.api.here.com/v3/3.0/mapsjs-ui.css" />
    <script type="text/javascript" src="https://js.cit.api.here.com/v3/3.0/mapsjs-core.js"></script>
    <script type="text/javascript" src="https://js.cit.api.here.com/v3/3.0/mapsjs-service.js"></script>
    <script type="text/javascript" src="https://js.cit.api.here.com/v3/3.0/mapsjs-ui.js"></script>
    <script type="text/javascript" src="https://js.cit.api.here.com/v3/3.0/mapsjs-mapevents.js"></script>
    <script type="text/javascript" src="mqttws31.js"></script>
  </head>
  <body>
    <div><span id="parameter" style="width: 100%; height: 200px; background-color: navy; color: white;"></span></div>
    <div id="map" style="width: 100%; height: 500px; background: grey" />
    <script  type="text/javascript" charset="UTF-8" >

    var platform = new H.service.Platform({
      app_id: 'pUOQk2ASMdS5JeoK3gYt',
      app_code: 'BPnxl9GdDtGuzhSDzotEPw',
      useCIT: true,
      useHTTPS: true
    });
    var defaultLayers = platform.createDefaultLayers();
    var map = new H.Map(document.getElementById('map'),
      defaultLayers.normal.map,{
      center: {lat:59.9451, lng:30.3717},
      zoom: 10
    });
    var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

    mqtt = new Paho.MQTT.Client("meteonet.io", Number(8883), "/", "browser-client");
    mqtt.onConnectionLost = onConnectionLost;
    mqtt.onMessageArrived = onMessageArrived;
    mqtt.connect({onSuccess: function(){mqtt.subscribe("hack2018");} });


    function onConnectionLost(responseObject) {
        if(responseObject.errorCode !== 0) {
            console.log("onConnectionLost:"+responseObject.errorMessage);
        }
     }

    function onMessageArrived(message) {
        var topic     = message.destinationName;
        var payload   = message.payloadString;
        console.log("payload: " + payload);
        var x         = JSON.parse(payload);
        var lat       = x.lat;
        var lon       = x.lon;
        var value     = Math.round(parseFloat(x.value));
        var element   = document.getElementById(parameter);
        replaceText(element, ""+value+"");
        console.log("value: " + value);
        var coords = {lat:59.9655, lng:30.3700};
        var colors = ["#600000","#a10000","#ff0000","#ff9d00","#efff00","#00ff1e"];
        var marker_color = (value < 55) ? colors[5] :
          (value < 155) ? colors[4] :
          (value < 255) ? colors[3] :
          (value < 355) ? colors[2] :
          (value < 425) ? colors[1] :
          colors[0];
        var svgMarkup = '<svg width="64" height="24" xmlns="http://www.w3.org/2000/svg">' +
          '<rect stroke="white" fill="' + marker_color + '" x="1" y="1" width="62" height="22" >' +
          '<text x="5" y="18" font-size="12pt" font-family="Arial" font-weight="bold" ' +
          'text-anchor="left" fill="white">' + value + '</text></svg>';
        var myIcon = new H.map.Icon(svgMarkup),
        marker = new H.map.Marker(coords,  {icon: myIcon});
        marker.draggable = false;
        map.addObject(marker);
    }


    map.addEventListener('dragstart', function(ev) {
      var target = ev.target;
      if(target instanceof H.map.Marker) {
        behavior.disable();
      }
    }, false);

    map.addEventListener('drag', function(ev) {
      var target = ev.target,
      pointer = ev.currentPointer;
      if(target instanceof mapsjs.map.Marker) {
        target.setPosition(map.screenToGeo(pointer.viewportX, pointer.viewportY));
      }
    }, false);

    map.addEventListener('dragend', function(ev) {
      var target = ev.target;
      if(target instanceof mapsjs.map.Marker) {
        behavior.enable();
      }
    }, false);

    addClickEventListenerToMap(map);

    // Replace text in tag
    function replaceText(el, text) {
      if(el!=null) {
        clearText(el);
        var newNode = document.createTextNode(text);
        el.appendChild(newNode);
      }

    }
    // Clear tag
    function clearText(el) {
      if(el!=null) {
        if(el.childNodes) {
          for(var i = 0; i < el.childNodes.length; i++) {
              var childNode = el.childNodes[i];
              el.removeChild(childNode);
          }
        }
      }
    }

    // Get text from tag
    function getText(el) {
      var text = "";
      if(el!=null) {
        if(el.childNodes) {
          for(var i = 0; i < el.childNodes.length; i++) {
            var childNode = el.childNodes[i];
              if(childNode.nodeValue != null) {
                text = text + childNode.nodeValue;
              }
            }
          }
        }
      return text;
    }

  </script>
</body>
</html>
